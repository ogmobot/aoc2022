import File from "sys/file"
// "Many of the functions in this module are not intended to be
// used directly, but rather for other libraries to be built on
// top of them."

import ImmutableSet from "immutableset"
import List from "list"
import ImmutableMap from "immutablemap"
import Option from "option"
import Range from "range"
import Result from "result"
import String from "string"

enum Direction { North, East, South, West }

let strToElfList = (text) => {
    let mut row = 0
    let mut col = 0
    let mut result = []
    Range.forEach(
        (i) => {
            match (String.charAt(i, text)) {
                '#' => {
                    result = List.insert((row, col), 0, result)
                    col = col + 1
                },
                '\n' => {
                    col = 0
                    row = row + 1
                },
                _ => {
                    col = col + 1
                }
            }
        },
        Range.Exclusive(0, String.length(text))
    )
    result
}

let getElves = (filename) => {
    let inputFile = Result.expect(
        "Failed to open file!",
        File.pathOpen(
            File.pwdfd, [],
            filename, [],
            [File.FdRead], [],
            [File.Sync]
        )
    )
    let (inputContents, _) = Result.expect(
        "Failed to read from file!",
        File.fdRead(inputFile, 999999)
    )
    strToElfList(inputContents)
}

let dirCoords = (r, c, dir) => match (dir) {
    North => ((r - 1, c - 1), (r - 1, c), (r - 1, c + 1)),
    South => ((r + 1, c - 1), (r + 1, c), (r + 1, c + 1)),
    West  => ((r - 1, c - 1), (r, c - 1), (r + 1, c - 1)),
    East  => ((r - 1, c + 1), (r, c + 1), (r + 1, c + 1))
}

let makeProp = (elf, elfSet, dirOrder) => {
    let (r, c) = elf
    let (dirA, dirB, dirC, dirD) = dirOrder
    if (List.every(
        (coord) => !ImmutableSet.contains(coord, elfSet),
        [(r - 1, c - 1), (r - 1, c), (r - 1, c + 1),
         (r    , c - 1),             (r    , c + 1),
         (r + 1, c - 1), (r + 1, c), (r + 1, c + 1)]
    )) {
        (r, c)
    } else {
        let (dirA, dirB, dirC, dirD) = dirOrder
        let opts = List.map(
            (dir) => {
                let (coordA, coordB, coordC) = dirCoords(r, c, dir)
                if (List.some(
                    (coord) => ImmutableSet.contains(coord, elfSet),
                    [coordA, coordB, coordC]
                ))
                    None
                else
                    Some(coordB)
            },
            [dirA, dirB, dirC, dirD]
        )
        let dest = List.find(Option.isSome, opts)
        Option.unwrap(
            Option.unwrapWithDefault(
                Some((r, c)),
                dest
            )
        )
    }
}

let makeFreqTable = (theList) => List.reduce(
    (table, elem) => ImmutableMap.set(
        elem,
        Option.unwrapWithDefault(
            0,
            ImmutableMap.get(elem, table)
        ) + 1,
        table
    ),
    ImmutableMap.empty,
    theList
)

let findScore = (elfList) => {
    let (minr, minc, maxr, maxc) = List.reduce(
        ((minr, minc, maxr, maxc), (r, c)) => (
            if (r < minr) r else minr,
            if (c < minc) c else minc,
            if (r > maxr) r else maxr,
            if (c > maxc) c else maxc
        ),
        (0, 0, 0, 0), // should probably use first elf's coords instead
        elfList
    )
    ((1 + maxr - minr) * (1 + maxc - minc)) - List.length(elfList)
}

let rec simulate = (elves, timer, dirOrder) => {
    if (timer == 10)
        print(findScore(elves))
    let mut carryOn = false
    let elfSet = ImmutableSet.fromList(elves)
    let elfProps = List.map((elf) => makeProp(elf, elfSet, dirOrder), elves)
    let elfPropsFT = makeFreqTable(elfProps)
    let newElves = List.zipWith(
        (elf, prop) => {
            //print(elf)
            //print(prop)
            if (Option.unwrap(ImmutableMap.get(prop, elfPropsFT)) == 1) {
                if (elf != prop) {
                    carryOn = true
                }
                prop
            } else {
                elf
            }
        },
        elves, elfProps
    )
    if (carryOn) {
        let (dirA, dirB, dirC, dirD) = dirOrder
        simulate(newElves, timer + 1, (dirB, dirC, dirD, dirA))
    } else {
        timer + 1
    }
}

let main = () => {
    let mut elves = getElves("input23.txt")
    print(simulate(elves, 0, (North, South, West, East)))
}

main()
